plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'
    id "java"
    id 'jacoco'
}

ext {
    junitParamsVersion = '5.4.0'
    junitMockitoVersion = '2.24.0'
    mockitoKotlinVersion = '2.2.0'
    assertjVersion = '3.12.2'
    bouncycastleVersion = '1.61'
    web3Version = '4.5.9'
    cucumberVersion = '4.7.2'
    apacheCxfVersion = '3.3.5'
    jakartaVersion = '2.1.6'
    jacksonJsonProviderVersion = '2.10.2.1'
    jacksonYamlDataFormatVersion = '2.10.2'
    jacksonModuleKotlin = '2.10.2'
    httpComponentsVersion = '4.5.11'
}

allprojects {
    group 'org.kevem'
    version '0.1-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.10
    targetCompatibility = 1.10

    repositories {
        mavenCentral()
    }

    test {
        dependsOn 'cleanTest'

        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed"
        }

        maxParallelForks = 2
    }
}

def publishedProjects = subprojects.findAll { ! it.path.contains(":compat") && ! it.path.contains(":ethereumtests") }

task jacocoMerge(type: JacocoMerge) {
    executionData = files(publishedProjects.collect() {file("${it.buildDir}/jacoco/test.exec")}).filter{ it.exists() }
    destinationFile = file("${buildDir}/jacoco/test.exec")
}

jacocoTestReport {
    dependsOn = tasks.withType(Test) + [jacocoMerge]

    executionData jacocoMerge.destinationFile
    getClassDirectories().from(files(publishedProjects.sourceSets.main.output))
    getSourceDirectories().from(publishedProjects.collect() {file("${it.projectDir}/src/main/kotlin")})
    getAdditionalSourceDirs().from(publishedProjects.collect() {file("${it.projectDir}/src/main/kotlin")})

    reports {
        html.enabled = true
        xml.enabled = true
    }
}
